
C:/Users/puzih/Documents/GitHub/lab10/interrupt_example.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea00000e 	b	40 <__cs3_region_init_ram>
   4:	ea00001a 	b	74 <SERVICE_UND>
   8:	ea00001a 	b	78 <SERVICE_SVC>
   c:	ea00001b 	b	80 <SERVICE_ABT_INST>
  10:	ea000019 	b	7c <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000019 	b	84 <SERVICE_IRQ>
  1c:	ea000021 	b	a8 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:

.text        
.global     _start 
_start:                                     
/* Set up stack pointers for IRQ and SVC processor modes */
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
  40:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
  44:	e121f001 	msr	CPSR_c, r1
            LDR     SP, =A9_ONCHIP_END - 3  // set IRQ stack to top of A9 onchip memory
  48:	e3e0d003 	mvn	sp, #3
/* Change to SVC (supervisor) mode with interrupts disabled */
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
  4c:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
  50:	e129f001 	msr	CPSR_fc, r1
            LDR     SP, =DDR_END - 3        // set SVC stack to top of DDR3 memory
  54:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

            BL      CONFIG_GIC              // configure the ARM generic interrupt controller
  58:	eb000015 	bl	b4 <CONFIG_GIC>

                                            // write to the pushbutton KEY interrupt mask register
            LDR     R0, =KEY_BASE           // pushbutton KEY base address
  5c:	e59f0048 	ldr	r0, [pc, #72]	; ac <SERVICE_FIQ+0x4>
            MOV     R1, #0xF               // set interrupt mask bits
  60:	e3a0100f 	mov	r1, #15
            STR     R1, [R0, #0x8]          // interrupt mask register is (base + 8)
  64:	e5801008 	str	r1, [r0, #8]

                                            // enable IRQ interrupts in the processor
            MOV     R0, #0b01010011         // IRQ unmasked, MODE = SVC
  68:	e3a00053 	mov	r0, #83	; 0x53
            MSR     CPSR_c, R0              
  6c:	e121f000 	msr	CPSR_c, r0

00000070 <IDLE>:
IDLE:                                       
            B       IDLE                    // main program simply idles
  70:	eafffffe 	b	70 <IDLE>

00000074 <SERVICE_UND>:

/* Define the exception service routines */

/*--- Undefined instructions --------------------------------------------------*/
SERVICE_UND:                                
            B       SERVICE_UND             
  74:	eafffffe 	b	74 <SERVICE_UND>

00000078 <SERVICE_SVC>:

/*--- Software interrupts -----------------------------------------------------*/
SERVICE_SVC:                                
            B       SERVICE_SVC             
  78:	eafffffe 	b	78 <SERVICE_SVC>

0000007c <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
SERVICE_ABT_DATA:                           
            B       SERVICE_ABT_DATA        
  7c:	eafffffe 	b	7c <SERVICE_ABT_DATA>

00000080 <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
SERVICE_ABT_INST:                           
            B       SERVICE_ABT_INST        
  80:	eafffffe 	b	80 <SERVICE_ABT_INST>

00000084 <SERVICE_IRQ>:

/*--- IRQ ---------------------------------------------------------------------*/
SERVICE_IRQ:                                
            PUSH    {R0-R7, LR}             
  84:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

/* Read the ICCIAR from the CPU interface */
            LDR     R4, =MPCORE_GIC_CPUIF   
  88:	e59f4020 	ldr	r4, [pc, #32]	; b0 <SERVICE_FIQ+0x8>
            LDR     R5, [R4, #ICCIAR]       // read from ICCIAR
  8c:	e594500c 	ldr	r5, [r4, #12]

00000090 <FPGA_IRQ1_HANDLER>:

FPGA_IRQ1_HANDLER:                          
            CMP     R5, #KEYS_IRQ           
  90:	e3550049 	cmp	r5, #73	; 0x49

00000094 <UNEXPECTED>:
UNEXPECTED: BNE     UNEXPECTED              // if not recognized, stop here
  94:	1afffffe 	bne	94 <UNEXPECTED>

            BL      KEY_ISR                 
  98:	eb000028 	bl	140 <KEY_ISR>

0000009c <EXIT_IRQ>:
EXIT_IRQ:                                   
/* Write to the End of Interrupt Register (ICCEOIR) */
            STR     R5, [R4, #ICCEOIR]      // write to ICCEOIR
  9c:	e5845010 	str	r5, [r4, #16]

            POP     {R0-R7, LR}             
  a0:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
            SUBS    PC, LR, #4              
  a4:	e25ef004 	subs	pc, lr, #4

000000a8 <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
SERVICE_FIQ:                                
            B       SERVICE_FIQ             
  a8:	eafffffe 	b	a8 <SERVICE_FIQ>
  ac:	ff200050 	.word	0xff200050
  b0:	fffec100 	.word	0xfffec100

000000b4 <CONFIG_GIC>:
  b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  b8:	e3a00049 	mov	r0, #73	; 0x49
  bc:	e3a01001 	mov	r1, #1
  c0:	eb000007 	bl	e4 <CONFIG_INTERRUPT>
  c4:	e59f0060 	ldr	r0, [pc, #96]	; 12c <ICDISER+0x2c>
  c8:	e59f1060 	ldr	r1, [pc, #96]	; 130 <ICDISER+0x30>
  cc:	e5801004 	str	r1, [r0, #4]
  d0:	e3a01001 	mov	r1, #1
  d4:	e5801000 	str	r1, [r0]
  d8:	e59f0054 	ldr	r0, [pc, #84]	; 134 <ICDISER+0x34>
  dc:	e5801000 	str	r1, [r0]
  e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000000e4 <CONFIG_INTERRUPT>:
  e4:	e92d4030 	push	{r4, r5, lr}
  e8:	e1a041a0 	lsr	r4, r0, #3
  ec:	e3c44003 	bic	r4, r4, #3
  f0:	e59f2040 	ldr	r2, [pc, #64]	; 138 <ICDISER+0x38>
  f4:	e0824004 	add	r4, r2, r4
  f8:	e200201f 	and	r2, r0, #31
  fc:	e3a05001 	mov	r5, #1
 100:	e1a02215 	lsl	r2, r5, r2
 104:	e5943000 	ldr	r3, [r4]
 108:	e1833002 	orr	r3, r3, r2
 10c:	e5843000 	str	r3, [r4]
 110:	e3c04003 	bic	r4, r0, #3
 114:	e59f2020 	ldr	r2, [pc, #32]	; 13c <ICDISER+0x3c>
 118:	e0824004 	add	r4, r2, r4
 11c:	e2002003 	and	r2, r0, #3
 120:	e0824004 	add	r4, r2, r4
 124:	e5c41000 	strb	r1, [r4]
 128:	e8bd8030 	pop	{r4, r5, pc}
 12c:	fffec100 	.word	0xfffec100
 130:	0000ffff 	.word	0x0000ffff
 134:	fffed000 	.word	0xfffed000
 138:	fffed100 	.word	0xfffed100
 13c:	fffed800 	.word	0xfffed800

00000140 <KEY_ISR>:
 * This routine checks which KEY has been pressed. It writes to LED display
 ***************************************************************************************/

.global     KEY_ISR 
KEY_ISR:                        
        LDR     R0, =KEY_BASE   // base address of pushbutton KEY port
 140:	e59f0054 	ldr	r0, [pc, #84]	; 19c <END_KEY_ISR+0x8>
        LDR     R1, [R0, #0xC]  // read edge capture register
 144:	e590100c 	ldr	r1, [r0, #12]
        MOV     R2, #0xF        
 148:	e3a0200f 	mov	r2, #15
        STR     R2, [R0, #0xC]  // clear the interrupt
 14c:	e580200c 	str	r2, [r0, #12]

        LDR     R0, =LED_BASE   // based address of LED display
 150:	e59f0048 	ldr	r0, [pc, #72]	; 1a0 <END_KEY_ISR+0xc>

00000154 <CHECK_KEY0>:
CHECK_KEY0:                     
        MOV     R3, #0x1        
 154:	e3a03001 	mov	r3, #1
        ANDS    R3, R3, R1      // check for KEY0
 158:	e0133001 	ands	r3, r3, r1
        BEQ     CHECK_KEY1      
 15c:	0a000001 	beq	168 <CHECK_KEY1>
        MOV     R2, #0b1        
 160:	e3a02001 	mov	r2, #1
        B       END_KEY_ISR     
 164:	ea00000a 	b	194 <END_KEY_ISR>

00000168 <CHECK_KEY1>:
CHECK_KEY1:
	MOV	R3, #0x2
 168:	e3a03002 	mov	r3, #2
	ANDS	R3, R3, R1	// check for KEY1
 16c:	e0133001 	ands	r3, r3, r1
	BEQ	CHECK_KEY2                     
 170:	0a000001 	beq	17c <CHECK_KEY2>
        MOV     R2, #0b10 
 174:	e3a02002 	mov	r2, #2
	B	END_KEY_ISR
 178:	ea000005 	b	194 <END_KEY_ISR>

0000017c <CHECK_KEY2>:
CHECK_KEY2:
	MOV	R3, #0x4
 17c:	e3a03004 	mov	r3, #4
	ANDS	R3, R3, R1	// check for KEY2
 180:	e0133001 	ands	r3, r3, r1
	BEQ	CHECK_KEY3                     
 184:	0a000001 	beq	190 <CHECK_KEY3>
        MOV     R2, #0b100 
 188:	e3a02004 	mov	r2, #4
	B	END_KEY_ISR
 18c:	ea000000 	b	194 <END_KEY_ISR>

00000190 <CHECK_KEY3>:
CHECK_KEY3:                     
        MOV     R2, #0b1000    
 190:	e3a02008 	mov	r2, #8

00000194 <END_KEY_ISR>:
END_KEY_ISR:                    
        STR     R2, [R0]        // display KEY pressed on LED
 194:	e5802000 	str	r2, [r0]
        BX      LR              
 198:	e12fff1e 	bx	lr
 19c:	ff200050 	.word	0xff200050
 1a0:	ff200000 	.word	0xff200000
