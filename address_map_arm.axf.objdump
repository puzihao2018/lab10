
C:/Users/puzih/Documents/GitHub/lab10/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000050 	b	148 <_start>
   4:	ea00006d 	b	1c0 <SERVICE_UND>
   8:	ea00006d 	b	1c4 <SERVICE_SVC>
   c:	ea00006e 	b	1cc <SERVICE_ABT_INST>
  10:	ea00006c 	b	1c8 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea00006c 	b	1d0 <SERVICE_IRQ>
  1c:	ea00007d 	b	218 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <CONFIG_GIC>:
  40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  44:	e3a00049 	mov	r0, #73	; 0x49
  48:	e3a01001 	mov	r1, #1
  4c:	eb00000d 	bl	88 <CONFIG_INTERRUPT>
  50:	e3a00050 	mov	r0, #80	; 0x50
  54:	e3a01001 	mov	r1, #1
  58:	eb00000a 	bl	88 <CONFIG_INTERRUPT>
  5c:	e3a0001d 	mov	r0, #29
  60:	e3a01001 	mov	r1, #1
  64:	eb000007 	bl	88 <CONFIG_INTERRUPT>
  68:	e59f0060 	ldr	r0, [pc, #96]	; d0 <HPS_WATCHDOG1_IRQ+0x4>
  6c:	e59f1060 	ldr	r1, [pc, #96]	; d4 <HPS_WATCHDOG1_IRQ+0x8>
  70:	e5801004 	str	r1, [r0, #4]
  74:	e3a01001 	mov	r1, #1
  78:	e5801000 	str	r1, [r0]
  7c:	e59f0054 	ldr	r0, [pc, #84]	; d8 <HPS_WATCHDOG1_IRQ+0xc>
  80:	e5801000 	str	r1, [r0]
  84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000088 <CONFIG_INTERRUPT>:
  88:	e92d4030 	push	{r4, r5, lr}
  8c:	e1a041a0 	lsr	r4, r0, #3
  90:	e3c44003 	bic	r4, r4, #3
  94:	e59f2040 	ldr	r2, [pc, #64]	; dc <HPS_WATCHDOG1_IRQ+0x10>
  98:	e0824004 	add	r4, r2, r4
  9c:	e200201f 	and	r2, r0, #31
  a0:	e3a05001 	mov	r5, #1
  a4:	e1a02215 	lsl	r2, r5, r2
  a8:	e5943000 	ldr	r3, [r4]
  ac:	e1833002 	orr	r3, r3, r2
  b0:	e5843000 	str	r3, [r4]
  b4:	e3c04003 	bic	r4, r0, #3
  b8:	e59f2020 	ldr	r2, [pc, #32]	; e0 <HPS_WATCHDOG1_IRQ+0x14>
  bc:	e0824004 	add	r4, r2, r4
  c0:	e2002003 	and	r2, r0, #3
  c4:	e0824004 	add	r4, r2, r4
  c8:	e5c41000 	strb	r1, [r4]
  cc:	e8bd8030 	pop	{r4, r5, pc}
  d0:	fffec100 	.word	0xfffec100
  d4:	0000ffff 	.word	0x0000ffff
  d8:	fffed000 	.word	0xfffed000
  dc:	fffed100 	.word	0xfffed100
  e0:	fffed800 	.word	0xfffed800

000000e4 <KEY_ISR>:
  e4:	e59f0054 	ldr	r0, [pc, #84]	; 140 <END_KEY_ISR+0x8>
  e8:	e590100c 	ldr	r1, [r0, #12]
  ec:	e3a0200f 	mov	r2, #15
  f0:	e580200c 	str	r2, [r0, #12]
  f4:	e59f0048 	ldr	r0, [pc, #72]	; 144 <END_KEY_ISR+0xc>

000000f8 <CHECK_KEY0>:
  f8:	e3a03001 	mov	r3, #1
  fc:	e0133001 	ands	r3, r3, r1
 100:	0a000001 	beq	10c <CHECK_KEY1>
 104:	e3a02001 	mov	r2, #1
 108:	ea00000a 	b	138 <END_KEY_ISR>

0000010c <CHECK_KEY1>:
 10c:	e3a03002 	mov	r3, #2
 110:	e0133001 	ands	r3, r3, r1
 114:	0a000001 	beq	120 <CHECK_KEY2>
 118:	e3a02002 	mov	r2, #2
 11c:	ea000005 	b	138 <END_KEY_ISR>

00000120 <CHECK_KEY2>:
 120:	e3a03004 	mov	r3, #4
 124:	e0133001 	ands	r3, r3, r1
 128:	0a000001 	beq	134 <CHECK_KEY3>
 12c:	e3a02004 	mov	r2, #4
 130:	ea000000 	b	138 <END_KEY_ISR>

00000134 <CHECK_KEY3>:
 134:	e3a02008 	mov	r2, #8

00000138 <END_KEY_ISR>:
 138:	e5802000 	str	r2, [r0]
 13c:	e12fff1e 	bx	lr
 140:	ff200050 	.word	0xff200050
 144:	ff200000 	.word	0xff200000

00000148 <_start>:

.text        
.global     _start 
_start:                                     
/* Set up stack pointers for IRQ and SVC processor modes */
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
 148:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
 14c:	e121f001 	msr	CPSR_c, r1
            LDR     SP, =A9_ONCHIP_END - 3  // set IRQ stack to top of A9 onchip memory
 150:	e3e0d003 	mvn	sp, #3
/* Change to SVC (supervisor) mode with interrupts disabled */
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
 154:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
 158:	e129f001 	msr	CPSR_fc, r1
            LDR     SP, =DDR_END - 3        // set SVC stack to top of DDR3 memory
 15c:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

            BL      CONFIG_GIC              // configure the ARM generic interrupt controller
 160:	ebffffb6 	bl	40 <CONFIG_GIC>

                                            // write to the pushbutton KEY interrupt mask register
            LDR     R0, =KEY_BASE           // pushbutton KEY base address
 164:	e59f0120 	ldr	r0, [pc, #288]	; 28c <CHAR_FLAG+0x4>
            MOV     R1, #0xF               // set interrupt mask bits
 168:	e3a0100f 	mov	r1, #15
            STR     R1, [R0, #0x8]          // interrupt mask register is (base + 8)
 16c:	e5801008 	str	r1, [r0, #8]

                                            // enable IRQ interrupts in the processor
            MOV     R0, #0b01010011         // IRQ unmasked, MODE = SVC
 170:	e3a00053 	mov	r0, #83	; 0x53
            MSR     CPSR_c, R0              
 174:	e121f000 	msr	CPSR_c, r0

00000178 <CONFIG_TIMER>:

CONFIG_TIMER://CONTRIBUTION: FRANCIS
            LDR     R0, =MPCORE_PRIV_TIMER  // set R0 points to MPCORE_PRIV_TIMER
 178:	e59f0110 	ldr	r0, [pc, #272]	; 290 <CHAR_FLAG+0x8>
            LDR     R1, =0x5F5E100             // set switch time to be 10^8, which is 0.5s
 17c:	e59f1110 	ldr	r1, [pc, #272]	; 294 <CHAR_FLAG+0xc>
            /*Load 10^8 to load register*/
            STR     R1, [R0, #0]            // load TIMER_LOAD be 10^8
 180:	e5801000 	str	r1, [r0]

            /*Load Control signal to contro register*/
            LDR     R1, [R0, #8]            // read current control register value
 184:	e5901008 	ldr	r1, [r0, #8]
            ORR     R1, R1, #7              // let R1 be 0b111
 188:	e3811007 	orr	r1, r1, #7
            STR     R1, [R0, #8]            // load control bit (I A E) be (1 1 1)
 18c:	e5801008 	str	r1, [r0, #8]

00000190 <CONFIG_JTAG>:

CONFIG_JTAG://CONTRIBUTION: Zihao Pu
            LDR     R0, =JTAG_UART_BASE     // set R0 points to JTAG
 190:	e59f0100 	ldr	r0, [pc, #256]	; 298 <CHAR_FLAG+0x10>
            MOV     R1, #1                  // set R1 be 1, then RE is 1 and WE is 0
 194:	e3a01001 	mov	r1, #1
            STR     R1, [R0,#4]             // Write to JTAG control
 198:	e5801004 	str	r1, [r0, #4]

0000019c <IDLE>:
IDLE:       
            BL      PUT_JTAG                          
 19c:	eb000000 	bl	1a4 <PUT_JTAG>
            B       IDLE                    // main program simply idles
 1a0:	eafffffd 	b	19c <IDLE>

000001a4 <PUT_JTAG>:

PUT_JTAG:   
            LDR R1, =0xFF201000 // JTAG UART base address
 1a4:	e59f10ec 	ldr	r1, [pc, #236]	; 298 <CHAR_FLAG+0x10>
            LDR R2, [R1, #4] // read the JTAG UART control register
 1a8:	e5912004 	ldr	r2, [r1, #4]
            LDR R3, =0xFFFF
 1ac:	e59f30e8 	ldr	r3, [pc, #232]	; 29c <CHAR_FLAG+0x14>
            ANDS R2, R2, R3 // check for write space
 1b0:	e0122003 	ands	r2, r2, r3
            BEQ END_PUT // if no space, ignore the character
 1b4:	0a000000 	beq	1bc <END_PUT>
            STR R0, [R1] // send the character
 1b8:	e5810000 	str	r0, [r1]

000001bc <END_PUT>:
END_PUT:    BX LR
 1bc:	e12fff1e 	bx	lr

000001c0 <SERVICE_UND>:

/* Define the exception service routines */

/*--- Undefined instructions --------------------------------------------------*/
SERVICE_UND:                                
            B       SERVICE_UND             
 1c0:	eafffffe 	b	1c0 <SERVICE_UND>

000001c4 <SERVICE_SVC>:

/*--- Software interrupts -----------------------------------------------------*/
SERVICE_SVC:                                
            B       SERVICE_SVC             
 1c4:	eafffffe 	b	1c4 <SERVICE_SVC>

000001c8 <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
SERVICE_ABT_DATA:                           
            B       SERVICE_ABT_DATA        
 1c8:	eafffffe 	b	1c8 <SERVICE_ABT_DATA>

000001cc <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
SERVICE_ABT_INST:                           
            B       SERVICE_ABT_INST        
 1cc:	eafffffe 	b	1cc <SERVICE_ABT_INST>

000001d0 <SERVICE_IRQ>:

/*--- IRQ ---------------------------------------------------------------------*/
SERVICE_IRQ:                                
            PUSH    {R0-R7, LR}             
 1d0:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

/* Read the ICCIAR from the CPU interface */
            LDR     R4, =MPCORE_GIC_CPUIF   
 1d4:	e59f40c4 	ldr	r4, [pc, #196]	; 2a0 <CHAR_FLAG+0x18>
            LDR     R5, [R4, #ICCIAR]       // read from ICCIAR
 1d8:	e594500c 	ldr	r5, [r4, #12]

000001dc <FPGA_IRQ1_HANDLER>:

FPGA_IRQ1_HANDLER:                         
            CMP     R5, #KEYS_IRQ           
 1dc:	e3550049 	cmp	r5, #73	; 0x49
            BNE     TIMER_HANDLER       //if not key, check timer     
 1e0:	1a000001 	bne	1ec <TIMER_HANDLER>

            BL      KEY_ISR
 1e4:	ebffffbe 	bl	e4 <KEY_ISR>
            B       EXIT_IRQ
 1e8:	ea000007 	b	20c <EXIT_IRQ>

000001ec <TIMER_HANDLER>:

TIMER_HANDLER://CONTRIBUTION: ZIhao PU
            CMP     R5, #MPCORE_PRIV_TIMER_IRQ   
 1ec:	e355001d 	cmp	r5, #29
            BNE     JTAG_INTERRUPT_HANDLER        // if not timer, check JTAG
 1f0:	1a000001 	bne	1fc <JTAG_INTERRUPT_HANDLER>

            BL      TIMER_ISR
 1f4:	eb000008 	bl	21c <TIMER_ISR>
            B       EXIT_IRQ
 1f8:	ea000003 	b	20c <EXIT_IRQ>

000001fc <JTAG_INTERRUPT_HANDLER>:

JTAG_INTERRUPT_HANDLER://CONTRIBUTION: FRANCIS
            CMP     R5, #JTAG_IRQ
 1fc:	e3550050 	cmp	r5, #80	; 0x50
        	BNE     UNEXPECTED
 200:	1a000000 	bne	208 <UNEXPECTED>
			BL      JTAG_ISR  //if equal go to JTAG ISR
 204:	eb000010 	bl	24c <JTAG_ISR>

00000208 <UNEXPECTED>:

UNEXPECTED:
            B       UNEXPECTED      //if not recognized, stop here
 208:	eafffffe 	b	208 <UNEXPECTED>

0000020c <EXIT_IRQ>:

EXIT_IRQ:                                   
/* Write to the End of Interrupt Register (ICCEOIR) */
            STR     R5, [R4, #ICCEOIR]      // write to ICCEOIR
 20c:	e5845010 	str	r5, [r4, #16]

            POP     {R0-R7, LR}             
 210:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
            SUBS    PC, LR, #4              
 214:	e25ef004 	subs	pc, lr, #4

00000218 <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
SERVICE_FIQ:                                
            B       SERVICE_FIQ             
 218:	eafffffe 	b	218 <SERVICE_FIQ>

0000021c <TIMER_ISR>:

/*TIMER_ISR*/   //CONTRIBUTION: Zihao PU
TIMER_ISR:

            PUSH    {R0-R4}
 21c:	e92d001f 	push	{r0, r1, r2, r3, r4}
            LDR     R0, =MPCORE_PRIV_TIMER
 220:	e59f0068 	ldr	r0, [pc, #104]	; 290 <CHAR_FLAG+0x8>
            MOV     R1, #0
 224:	e3a01000 	mov	r1, #0
            STR     R1, [R0, #0xC]          //clear interrupt register
 228:	e580100c 	str	r1, [r0, #12]
            LDR     R2, =number
 22c:	e59f2070 	ldr	r2, [pc, #112]	; 2a4 <CHAR_FLAG+0x1c>
            LDR     R3, =LED_BASE           
 230:	e59f3070 	ldr	r3, [pc, #112]	; 2a8 <CHAR_FLAG+0x20>
            LDR     R4, [R2]                //read current number
 234:	e5924000 	ldr	r4, [r2]
            ADD     R4, R4, #1              //increment by 1
 238:	e2844001 	add	r4, r4, #1
            STR     R4, [R3,#0]             // write on LED
 23c:	e5834000 	str	r4, [r3]
            STR     R4, [R2,#0]             //write back to number
 240:	e5824000 	str	r4, [r2]
            POP     {R0-R4}
 244:	e8bd001f 	pop	{r0, r1, r2, r3, r4}
            BX      LR
 248:	e12fff1e 	bx	lr

0000024c <JTAG_ISR>:

JTAG_ISR:   //CONTRIBUTION: FRANCIS
            LDR  R0,  =JTAG_UART_BASE     //load the base address of jtag
 24c:	e59f0044 	ldr	r0, [pc, #68]	; 298 <CHAR_FLAG+0x10>
			LDR  R1, [R0]			      //get the data in the data register 
 250:	e5901000 	ldr	r1, [r0]
			LSR  R1, R1, #16              //shift it right 16 bits, get only the RAVAIL value
 254:	e1a01821 	lsr	r1, r1, #16
			CMP  R1, #7                   //compair, see if greater than 7
 258:	e3510007 	cmp	r1, #7
			BLE  EXIT_IRQ                 //if not turn to exit_irq
 25c:	daffffea 	ble	20c <EXIT_IRQ>
			
			MOV  R5, #1                   //move a immediate 1 into R5
 260:	e3a05001 	mov	r5, #1
			LDR  R6, =CHAR_FLAG           //get address of charflag
 264:	e59f6040 	ldr	r6, [pc, #64]	; 2ac <CHAR_FLAG+0x24>
			STR  R5, [R6]                 //set the flag to be one
 268:	e5865000 	str	r5, [r6]
            LDRB  R2, [R0]                //get the value in the register again
 26c:	e5d02000 	ldrb	r2, [r0]
            AND  R2, R2, #0x0000000F      //get data value
 270:	e202200f 	and	r2, r2, #15
			LDR  R3,  =CHAR_BUFFER        //load the char buffer address
 274:	e59f3034 	ldr	r3, [pc, #52]	; 2b0 <CHAR_FLAG+0x28>
			STR  R2, [R3]			      //store the char value into the buffer
 278:	e5832000 	str	r2, [r3]
			BX   LR
 27c:	e12fff1e 	bx	lr

00000280 <number>:
 280:	00000000 	.word	0x00000000

00000284 <CHAR_BUFFER>:
 284:	00000000 	.word	0x00000000

00000288 <CHAR_FLAG>:
 288:	00000000 	.word	0x00000000
 28c:	ff200050 	.word	0xff200050
 290:	fffec600 	.word	0xfffec600
 294:	05f5e100 	.word	0x05f5e100
 298:	ff201000 	.word	0xff201000
 29c:	0000ffff 	.word	0x0000ffff
 2a0:	fffec100 	.word	0xfffec100
 2a4:	00000280 	.word	0x00000280
 2a8:	ff200000 	.word	0xff200000
 2ac:	00000288 	.word	0x00000288
 2b0:	00000284 	.word	0x00000284
