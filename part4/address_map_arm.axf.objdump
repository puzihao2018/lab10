
C:/Users/puzih/Documents/GitHub/lab10/part4/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000050 	b	148 <_start>
   4:	ea000081 	b	210 <SERVICE_UND>
   8:	ea000081 	b	214 <SERVICE_SVC>
   c:	ea000082 	b	21c <SERVICE_ABT_INST>
  10:	ea000080 	b	218 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000080 	b	220 <SERVICE_IRQ>
  1c:	ea000092 	b	26c <SERVICE_FIQ>

Disassembly of section .text:

00000040 <CONFIG_GIC>:
  40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  44:	e3a00049 	mov	r0, #73	; 0x49
  48:	e3a01001 	mov	r1, #1
  4c:	eb00000d 	bl	88 <CONFIG_INTERRUPT>
  50:	e3a00050 	mov	r0, #80	; 0x50
  54:	e3a01001 	mov	r1, #1
  58:	eb00000a 	bl	88 <CONFIG_INTERRUPT>
  5c:	e3a0001d 	mov	r0, #29
  60:	e3a01001 	mov	r1, #1
  64:	eb000007 	bl	88 <CONFIG_INTERRUPT>
  68:	e59f0060 	ldr	r0, [pc, #96]	; d0 <HPS_WATCHDOG1_IRQ+0x4>
  6c:	e59f1060 	ldr	r1, [pc, #96]	; d4 <HPS_WATCHDOG1_IRQ+0x8>
  70:	e5801004 	str	r1, [r0, #4]
  74:	e3a01001 	mov	r1, #1
  78:	e5801000 	str	r1, [r0]
  7c:	e59f0054 	ldr	r0, [pc, #84]	; d8 <HPS_WATCHDOG1_IRQ+0xc>
  80:	e5801000 	str	r1, [r0]
  84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000088 <CONFIG_INTERRUPT>:
  88:	e92d4030 	push	{r4, r5, lr}
  8c:	e1a041a0 	lsr	r4, r0, #3
  90:	e3c44003 	bic	r4, r4, #3
  94:	e59f2040 	ldr	r2, [pc, #64]	; dc <HPS_WATCHDOG1_IRQ+0x10>
  98:	e0824004 	add	r4, r2, r4
  9c:	e200201f 	and	r2, r0, #31
  a0:	e3a05001 	mov	r5, #1
  a4:	e1a02215 	lsl	r2, r5, r2
  a8:	e5943000 	ldr	r3, [r4]
  ac:	e1833002 	orr	r3, r3, r2
  b0:	e5843000 	str	r3, [r4]
  b4:	e3c04003 	bic	r4, r0, #3
  b8:	e59f2020 	ldr	r2, [pc, #32]	; e0 <HPS_WATCHDOG1_IRQ+0x14>
  bc:	e0824004 	add	r4, r2, r4
  c0:	e2002003 	and	r2, r0, #3
  c4:	e0824004 	add	r4, r2, r4
  c8:	e5c41000 	strb	r1, [r4]
  cc:	e8bd8030 	pop	{r4, r5, pc}
  d0:	fffec100 	.word	0xfffec100
  d4:	0000ffff 	.word	0x0000ffff
  d8:	fffed000 	.word	0xfffed000
  dc:	fffed100 	.word	0xfffed100
  e0:	fffed800 	.word	0xfffed800

000000e4 <KEY_ISR>:
  e4:	e59f0054 	ldr	r0, [pc, #84]	; 140 <END_KEY_ISR+0x8>
  e8:	e590100c 	ldr	r1, [r0, #12]
  ec:	e3a0200f 	mov	r2, #15
  f0:	e580200c 	str	r2, [r0, #12]
  f4:	e59f0048 	ldr	r0, [pc, #72]	; 144 <END_KEY_ISR+0xc>

000000f8 <CHECK_KEY0>:
  f8:	e3a03001 	mov	r3, #1
  fc:	e0133001 	ands	r3, r3, r1
 100:	0a000001 	beq	10c <CHECK_KEY1>
 104:	e3a02001 	mov	r2, #1
 108:	ea00000a 	b	138 <END_KEY_ISR>

0000010c <CHECK_KEY1>:
 10c:	e3a03002 	mov	r3, #2
 110:	e0133001 	ands	r3, r3, r1
 114:	0a000001 	beq	120 <CHECK_KEY2>
 118:	e3a02002 	mov	r2, #2
 11c:	ea000005 	b	138 <END_KEY_ISR>

00000120 <CHECK_KEY2>:
 120:	e3a03004 	mov	r3, #4
 124:	e0133001 	ands	r3, r3, r1
 128:	0a000001 	beq	134 <CHECK_KEY3>
 12c:	e3a02004 	mov	r2, #4
 130:	ea000000 	b	138 <END_KEY_ISR>

00000134 <CHECK_KEY3>:
 134:	e3a02008 	mov	r2, #8

00000138 <END_KEY_ISR>:
 138:	e5802000 	str	r2, [r0]
 13c:	e12fff1e 	bx	lr
 140:	ff200050 	.word	0xff200050
 144:	ff200000 	.word	0xff200000

00000148 <_start>:

.text        
.global     _start 
_start:                                     
/* Set up stack pointers for IRQ and SVC processor modes */
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
 148:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
 14c:	e121f001 	msr	CPSR_c, r1
            LDR     SP, =A9_ONCHIP_END - 3  // set IRQ stack to top of A9 onchip memory
 150:	e3e0d003 	mvn	sp, #3
/* Change to SVC (supervisor) mode with interrupts disabled */
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
 154:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
 158:	e129f001 	msr	CPSR_fc, r1
            LDR     SP, =DDR_END - 3        // set SVC stack to top of DDR3 memory
 15c:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

            BL      CONFIG_GIC              // configure the ARM generic interrupt controller
 160:	ebffffb6 	bl	40 <CONFIG_GIC>

                                            // write to the pushbutton KEY interrupt mask register
            LDR     R0, =KEY_BASE           // pushbutton KEY base address
 164:	e59f03a0 	ldr	r0, [pc, #928]	; 50c <PD_OFFSET+0x4>
            MOV     R1, #0xF               // set interrupt mask bits
 168:	e3a0100f 	mov	r1, #15
            STR     R1, [R0, #0x8]          // interrupt mask register is (base + 8)
 16c:	e5801008 	str	r1, [r0, #8]

                                            // enable IRQ interrupts in the processor
            MOV     R0, #0b01010011         // IRQ unmasked, MODE = SVC
 170:	e3a00053 	mov	r0, #83	; 0x53
            MSR     CPSR_c, R0              
 174:	e121f000 	msr	CPSR_c, r0

00000178 <CONFIG_TIMER>:

CONFIG_TIMER://CONTRIBUTION: FRANCIS
            LDR     R0, =MPCORE_PRIV_TIMER  // set R0 points to MPCORE_PRIV_TIMER
 178:	e59f0390 	ldr	r0, [pc, #912]	; 510 <__cs3_region_init_size_ram>
            LDR     R1, =500                // set timer interrupt to be 500, so switch threads every 0.00025s
 17c:	e3a01f7d 	mov	r1, #500	; 0x1f4
            /*Load 10^8 to load register*/
            STR     R1, [R0, #0]            // load TIMER_LOAD be 10^8
 180:	e5801000 	str	r1, [r0]

            /*Load Control signal to contro register*/
            MOV     R1, #7
 184:	e3a01007 	mov	r1, #7
            STR     R1, [R0, #8]            // load control bit (I A E) be (1 1 1)
 188:	e5801008 	str	r1, [r0, #8]

0000018c <CONFIG_JTAG>:

CONFIG_JTAG://CONTRIBUTION: Zihao Pu
            LDR     R0, =JTAG_UART_BASE     // set R0 points to JTAG
 18c:	e59f0380 	ldr	r0, [pc, #896]	; 514 <__cs3_region_init_size_ram+0x4>
            MOV     R1, #0x1
 190:	e3a01001 	mov	r1, #1
            STR     R1, [R0,#0x4]             // Write to JTAG control
 194:	e5801004 	str	r1, [r0, #4]

00000198 <CONTFIG_PID>:

CONTFIG_PID://CONTRIBUTION:Zihao Pu
            LDR     R0, =CURRENT_PID        //set R0 points to CURRENT_PID
 198:	e59f0378 	ldr	r0, [pc, #888]	; 518 <__cs3_region_init_size_ram+0x8>
            MOV     R1, #0                  //PID should be 0 at first
 19c:	e3a01000 	mov	r1, #0
            STR     R1, [R0]                //write 0 to CURRENT_PID
 1a0:	e5801000 	str	r1, [r0]

000001a4 <IDLE>:

IDLE:       //CONTRIBUTION: FRANCIS
            LDR     R1, =CHAR_FLAG
 1a4:	e59f1370 	ldr	r1, [pc, #880]	; 51c <__cs3_region_init_size_ram+0xc>
			LDR     R0, [R1]
 1a8:	e5910000 	ldr	r0, [r1]
			CMP     R0, #1
 1ac:	e3500001 	cmp	r0, #1
			BNE     IDLE 
 1b0:	1afffffb 	bne	1a4 <IDLE>
			LDR     R2, =CHAR_BUFFER
 1b4:	e59f2364 	ldr	r2, [pc, #868]	; 520 <__cs3_region_init_size_ram+0x10>
            LDRB    R0, [R2,#0]
 1b8:	e5d20000 	ldrb	r0, [r2]
			BL      PUT_JTAG
 1bc:	eb00000c 	bl	1f4 <PUT_JTAG>
            LDR     R1, =CHAR_FLAG
 1c0:	e59f1354 	ldr	r1, [pc, #852]	; 51c <__cs3_region_init_size_ram+0xc>
			MOV     R2, #0
 1c4:	e3a02000 	mov	r2, #0
			STR     R2, [R1]
 1c8:	e5812000 	str	r2, [r1]
            B       IDLE                    // main program simply idles
 1cc:	eafffff4 	b	1a4 <IDLE>

000001d0 <PROC1>:

PROC1:      //CONTRIBUTION: FRANCIS
            MOV R0, #0
 1d0:	e3a00000 	mov	r0, #0
			LDR R1, =0xFF200000
 1d4:	e59f1348 	ldr	r1, [pc, #840]	; 524 <__cs3_region_init_size_ram+0x14>

000001d8 <loop>:
loop:       ADD R0,R0,#1
 1d8:	e2800001 	add	r0, r0, #1
            STR R0,[R1] 			
 1dc:	e5810000 	str	r0, [r1]
			MOV R2, #0
 1e0:	e3a02000 	mov	r2, #0

000001e4 <doloop>:
doloop:	    ADD R2,R2,#1
 1e4:	e2822001 	add	r2, r2, #1
			CMP R2, #256 //my chosen large number
 1e8:	e3520c01 	cmp	r2, #256	; 0x100
			BLT doloop
 1ec:	bafffffc 	blt	1e4 <doloop>
			B   loop
 1f0:	eafffff8 	b	1d8 <loop>

000001f4 <PUT_JTAG>:

PUT_JTAG:   
            LDR R1, =0xFF201000 // JTAG UART base address
 1f4:	e59f1318 	ldr	r1, [pc, #792]	; 514 <__cs3_region_init_size_ram+0x4>
            LDR R2, [R1, #4] // read the JTAG UART control register
 1f8:	e5912004 	ldr	r2, [r1, #4]
            LDR R3, =0xFFFF
 1fc:	e59f3324 	ldr	r3, [pc, #804]	; 528 <__cs3_region_init_size_ram+0x18>
            ANDS R2, R2, R3 // check for write space
 200:	e0122003 	ands	r2, r2, r3
            BEQ END_PUT // if no space, ignore the character
 204:	0a000000 	beq	20c <END_PUT>
            STR R0, [R1] // send the character
 208:	e5810000 	str	r0, [r1]

0000020c <END_PUT>:
END_PUT:    BX LR
 20c:	e12fff1e 	bx	lr

00000210 <SERVICE_UND>:

/* Define the exception service routines */

/*--- Undefined instructions --------------------------------------------------*/
SERVICE_UND:                                
            B       SERVICE_UND             
 210:	eafffffe 	b	210 <SERVICE_UND>

00000214 <SERVICE_SVC>:

/*--- Software interrupts -----------------------------------------------------*/
SERVICE_SVC:                                
            B       SERVICE_SVC             
 214:	eafffffe 	b	214 <SERVICE_SVC>

00000218 <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
SERVICE_ABT_DATA:                           
            B       SERVICE_ABT_DATA        
 218:	eafffffe 	b	218 <SERVICE_ABT_DATA>

0000021c <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
SERVICE_ABT_INST:                           
            B       SERVICE_ABT_INST        
 21c:	eafffffe 	b	21c <SERVICE_ABT_INST>

00000220 <SERVICE_IRQ>:

/*--- IRQ ---------------------------------------------------------------------*/
SERVICE_IRQ:                                
            PUSH    {R0-R7, LR}             
 220:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

/* Read the ICCIAR from the CPU interface */
            LDR     R4, =MPCORE_GIC_CPUIF   
 224:	e59f4300 	ldr	r4, [pc, #768]	; 52c <__cs3_region_init_size_ram+0x1c>
            LDR     R5, [R4, #ICCIAR]            // read from ICCIAR
 228:	e594500c 	ldr	r5, [r4, #12]

0000022c <FPGA_IRQ1_HANDLER>:

FPGA_IRQ1_HANDLER:                         
            CMP     R5, #KEYS_IRQ           
 22c:	e3550049 	cmp	r5, #73	; 0x49
            BNE     JTAG_INTERRUPT_HANDLER       // if not key, check JTAG     
 230:	1a000001 	bne	23c <JTAG_INTERRUPT_HANDLER>
            BL      KEY_ISR                      // if equal go to KEY ISR    
 234:	ebffffaa 	bl	e4 <KEY_ISR>
            B       EXIT_IRQ
 238:	ea000008 	b	260 <EXIT_IRQ>

0000023c <JTAG_INTERRUPT_HANDLER>:

JTAG_INTERRUPT_HANDLER://CONTRIBUTION: FRANCIS
            CMP     R5, #JTAG_IRQ
 23c:	e3550050 	cmp	r5, #80	; 0x50
        	BNE     TIMER_HANDLER                  // if not JTAG, go TIMER_HANDLER
 240:	1a000001 	bne	24c <TIMER_HANDLER>
			BL      JTAG_ISR                    // if equal go to JTAG ISR
 244:	eb000082 	bl	454 <JTAG_ISR>
            B       EXIT_IRQ
 248:	ea000004 	b	260 <EXIT_IRQ>

0000024c <TIMER_HANDLER>:


TIMER_HANDLER://CONTRIBUTION: ZIhao PU
            CMP     R5, #MPCORE_PRIV_TIMER_IRQ   
 24c:	e355001d 	cmp	r5, #29
            BNE     UNEXPECTED                  // if not recognized, go unexpected
 250:	1a000001 	bne	25c <UNEXPECTED>
            BL      TIMER_ISR                   // if equal, exit IRQ
 254:	eb000005 	bl	270 <TIMER_ISR>
            B       EXIT_IRQ                    
 258:	ea000000 	b	260 <EXIT_IRQ>

0000025c <UNEXPECTED>:

UNEXPECTED:
            B       UNEXPECTED      //if not recognized, stop here
 25c:	eafffffe 	b	25c <UNEXPECTED>

00000260 <EXIT_IRQ>:

EXIT_IRQ:                                   
/* Write to the End of Interrupt Register (ICCEOIR) */
            STR     R5, [R4, #ICCEOIR]      // write to ICCEOIR
 260:	e5845010 	str	r5, [r4, #16]

            POP     {R0-R7, LR}             
 264:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
            SUBS    PC, LR, #4              
 268:	e25ef004 	subs	pc, lr, #4

0000026c <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
SERVICE_FIQ:                                
            B       SERVICE_FIQ             
 26c:	eafffffe 	b	26c <SERVICE_FIQ>

00000270 <TIMER_ISR>:

/*TIMER_ISR*/   //CONTRIBUTION: Zihao PU
TIMER_ISR:

            LDR     R0, =MPCORE_PRIV_TIMER
 270:	e59f0298 	ldr	r0, [pc, #664]	; 510 <__cs3_region_init_size_ram>
            MOV     R1, #0
 274:	e3a01000 	mov	r1, #0
            STR     R1, [R0, #0xC]          //clear interrupt register
 278:	e580100c 	str	r1, [r0, #12]
            LDR     R2, =CURRENT_PID        //get current_pid address
 27c:	e59f2294 	ldr	r2, [pc, #660]	; 518 <__cs3_region_init_size_ram+0x8>
            LDR     R3, [R2, #0]            //load pid
 280:	e5923000 	ldr	r3, [r2]
            CMP     R3, #0                  //check if pid is 0
 284:	e3530000 	cmp	r3, #0
            BEQ     pro0                    //if 0, go pro0
 288:	0a000000 	beq	290 <pro0>
            B       pro1                    //if 1, go pro1
 28c:	ea000039 	b	378 <pro1>

00000290 <pro0>:

pro0:       //CONTRIBUTION Yuqi, Fu
            LDR     R7, =PD_ARRAY          //get the pd_array address
 290:	e59f7298 	ldr	r7, [pc, #664]	; 530 <__cs3_region_init_size_ram+0x20>
            MOV     R3, #1
 294:	e3a03001 	mov	r3, #1
            STR     R3, [R2]                  //update current_pid to be 1
 298:	e5823000 	str	r3, [r2]
            
            /***store normal registers outside interrupt***/
            STR     R8, [R7, #32]
 29c:	e5878020 	str	r8, [r7, #32]
            STR     R9, [R7, #36]
 2a0:	e5879024 	str	r9, [r7, #36]	; 0x24
            STR     R10,[R7, #40]
 2a4:	e587a028 	str	r10, [r7, #40]	; 0x28
            STR     R11,[R7, #44]
 2a8:	e587b02c 	str	r11, [r7, #44]	; 0x2c
            STR     R12,[R7, #48]
 2ac:	e587c030 	str	r12, [r7, #48]	; 0x30

            /***store spsr***/
            MRS     R0, SPSR
 2b0:	e14f0000 	mrs	r0, SPSR
            STR     R0, [R7, #0x40]
 2b4:	e5870040 	str	r0, [r7, #64]	; 0x40

            /***clear interrupt***/
            LDR     R5, =29
 2b8:	e3a0501d 	mov	r5, #29
            STR     R5, [R4, #ICCEOIR]      // write to ICCEOIR
 2bc:	e5845010 	str	r5, [r4, #16]

            /***store registers before interrupt***/
            LDR     R8, =PD_ARRAY           // already backed-up, use to store pd-array address
 2c0:	e59f8268 	ldr	r8, [pc, #616]	; 530 <__cs3_region_init_size_ram+0x20>
            POP     {R0-R7,LR}              // restore the stored R0-R7 and LR before interrupting
 2c4:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
            STR     R0, [R8, #0]
 2c8:	e5880000 	str	r0, [r8]
            STR     R1, [R8, #4]
 2cc:	e5881004 	str	r1, [r8, #4]
            STR     R2, [R8, #8]
 2d0:	e5882008 	str	r2, [r8, #8]
            STR     R3, [R8, #12]
 2d4:	e588300c 	str	r3, [r8, #12]
            STR     R4, [R8, #16]
 2d8:	e5884010 	str	r4, [r8, #16]
            STR     R5, [R8, #20]
 2dc:	e5885014 	str	r5, [r8, #20]
            STR     R6, [R8, #24]
 2e0:	e5886018 	str	r6, [r8, #24]
            STR     R7, [R8, #28]
 2e4:	e588701c 	str	r7, [r8, #28]
            STR     LR, [R8, #0x3C]
 2e8:	e588e03c 	str	lr, [r8, #60]	; 0x3c
            /***end store normal registers***/

            /***FORCE GOES TO SVR, AND SAVE LR/PC***/
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
 2ec:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
 2f0:	e129f001 	msr	CPSR_fc, r1
            STR     SP, [R8, #52]          // store SVC sp to pd_array
 2f4:	e588d034 	str	sp, [r8, #52]	; 0x34
            STR     LR, [R8, #56]          // store SVC lr tp pd_array
 2f8:	e588e038 	str	lr, [r8, #56]	; 0x38
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
 2fc:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
 300:	e121f001 	msr	CPSR_c, r1
            /***Done with storing***/

            /***Starting Loading Normal Registers***/
            LDR     R8, =PD_ARRAY           // copy pd_array address to R8
 304:	e59f8224 	ldr	r8, [pc, #548]	; 530 <__cs3_region_init_size_ram+0x20>
            LDR     R9, =PD_OFFSET          // copy pd_offset address to R9
 308:	e59f9224 	ldr	r9, [pc, #548]	; 534 <__cs3_region_init_size_ram+0x24>
            LDR     R10, [R9]               // load pd offset to r10
 30c:	e599a000 	ldr	r10, [r9]
            ADD     R8, R8, R10             // PD_array base address of process 1
 310:	e088800a 	add	r8, r8, r10
            LDR     R0, [R8,#0]
 314:	e5980000 	ldr	r0, [r8]
            LDR     R1, [R8,#4]
 318:	e5981004 	ldr	r1, [r8, #4]
            LDR     R2, [R8,#8]
 31c:	e5982008 	ldr	r2, [r8, #8]
            LDR     R3, [R8,#12]
 320:	e598300c 	ldr	r3, [r8, #12]
            LDR     R4, [R8, #16]
 324:	e5984010 	ldr	r4, [r8, #16]
            LDR     R5, [R8, #20]
 328:	e5985014 	ldr	r5, [r8, #20]
            LDR     R6, [R8, #24]
 32c:	e5986018 	ldr	r6, [r8, #24]
            LDR     R7, [R8, #28]
 330:	e598701c 	ldr	r7, [r8, #28]
            PUSH    {R0-R7}                 //R0-R7 will be used later
 334:	e92d00ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7}
            
            /***Loading SPSR***/
            LDR     R0, [R8, #0x40]         //Load PROC1 SPSR to R0
 338:	e5980040 	ldr	r0, [r8, #64]	; 0x40
            MSR     SPSR, R0                //Copies R0 into SPSR
 33c:	e169f000 	msr	SPSR_fc, r0

            /***Load other normal registers***/
            MOV     R7, R8                  //mov, let R7 be PD_array base address of process 1
 340:	e1a07008 	mov	r7, r8
            LDR     R8, [R7, #32]
 344:	e5978020 	ldr	r8, [r7, #32]
            LDR     R9, [R7, #36]
 348:	e5979024 	ldr	r9, [r7, #36]	; 0x24
            LDR     R10,[R7, #40]
 34c:	e597a028 	ldr	r10, [r7, #40]	; 0x28
            LDR     R11,[R7, #44]
 350:	e597b02c 	ldr	r11, [r7, #44]	; 0x2c
            LDR     R12,[R7, #48]
 354:	e597c030 	ldr	r12, [r7, #48]	; 0x30
            /***Normal registers restored finished***/
            
            /***FORCE GOES TO SVR, AND Restore LR&PC***/
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
 358:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
 35c:	e129f001 	msr	CPSR_fc, r1
            LDR     SP, [R7, #52]          // Restore SVC sp from pd_array
 360:	e597d034 	ldr	sp, [r7, #52]	; 0x34
            LDR     LR, [R7, #56]          // Restore SVC lr from pd_array
 364:	e597e038 	ldr	lr, [r7, #56]	; 0x38
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
 368:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
 36c:	e121f001 	msr	CPSR_c, r1
            /***Done with Restoring***/

            /***SWTICH PROCESS***/
            POP     {R0-R7}                 //POP back used R0-R7
 370:	e8bd00ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
            SUBS    PC, LR, #4              
 374:	e25ef004 	subs	pc, lr, #4

00000378 <pro1>:

pro1:       //CONTRIBUTION Yuqi, Fu
            LDR     R7, =PD_ARRAY          //get the pd_array address
 378:	e59f71b0 	ldr	r7, [pc, #432]	; 530 <__cs3_region_init_size_ram+0x20>
            ADD     R7, R7, #0x48          //get the pd_array base address of process1
 37c:	e2877048 	add	r7, r7, #72	; 0x48
            MOV     R3, #0
 380:	e3a03000 	mov	r3, #0
            STR     R3, [R2]                  //update current_pid to be 1
 384:	e5823000 	str	r3, [r2]
            
            /***store normal registers outside interrupt***/
            STR     R8, [R7, #32]
 388:	e5878020 	str	r8, [r7, #32]
            STR     R9, [R7, #36]
 38c:	e5879024 	str	r9, [r7, #36]	; 0x24
            STR     R10,[R7, #40]
 390:	e587a028 	str	r10, [r7, #40]	; 0x28
            STR     R11,[R7, #44]
 394:	e587b02c 	str	r11, [r7, #44]	; 0x2c
            STR     R12,[R7, #48]
 398:	e587c030 	str	r12, [r7, #48]	; 0x30

            /***store spsr***/
            MRS     R0,SPSR
 39c:	e14f0000 	mrs	r0, SPSR
            STR     R0, [R7, #0x40]
 3a0:	e5870040 	str	r0, [r7, #64]	; 0x40
            
            /***clear interrupt***/
            LDR     R5, =29
 3a4:	e3a0501d 	mov	r5, #29
            STR     R5, [R4, #ICCEOIR]      // write to ICCEOIR
 3a8:	e5845010 	str	r5, [r4, #16]

            /***store registers before interrupt***/
            MOV     R8, R7                  // already backed-up, use to store pd-array base address of process2
 3ac:	e1a08007 	mov	r8, r7
            POP     {R0-R7,LR}              // restore the stored R0-R7 and LR before interrupting
 3b0:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
            STR     R0, [R8, #0]
 3b4:	e5880000 	str	r0, [r8]
            STR     R1, [R8, #4]
 3b8:	e5881004 	str	r1, [r8, #4]
            STR     R2, [R8, #8]
 3bc:	e5882008 	str	r2, [r8, #8]
            STR     R3, [R8, #12]
 3c0:	e588300c 	str	r3, [r8, #12]
            STR     R4, [R8, #16]
 3c4:	e5884010 	str	r4, [r8, #16]
            STR     R5, [R8, #20]
 3c8:	e5885014 	str	r5, [r8, #20]
            STR     R6, [R8, #24]
 3cc:	e5886018 	str	r6, [r8, #24]
            STR     R7, [R8, #28]
 3d0:	e588701c 	str	r7, [r8, #28]
            STR     LR, [R8, #0x3C]
 3d4:	e588e03c 	str	lr, [r8, #60]	; 0x3c
            /***end store normal registers***/

            /***FORCE GOES TO SVR, AND SAVE LR/PC***/
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
 3d8:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
 3dc:	e129f001 	msr	CPSR_fc, r1
            STR     SP, [R8, #52]          // store SVC sp to pd_array
 3e0:	e588d034 	str	sp, [r8, #52]	; 0x34
            STR     LR, [R8, #56]          // store SVC lr tp pd_array
 3e4:	e588e038 	str	lr, [r8, #56]	; 0x38
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
 3e8:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
 3ec:	e121f001 	msr	CPSR_c, r1
            /***Done with storing***/

            /***Starting Loading Normal Registers***/
            LDR     R8, =PD_ARRAY           // copy pd_array base address to R8
 3f0:	e59f8138 	ldr	r8, [pc, #312]	; 530 <__cs3_region_init_size_ram+0x20>
            LDR     R0, [R8,#0]
 3f4:	e5980000 	ldr	r0, [r8]
            LDR     R1, [R8,#4]
 3f8:	e5981004 	ldr	r1, [r8, #4]
            LDR     R2, [R8,#8]
 3fc:	e5982008 	ldr	r2, [r8, #8]
            LDR     R3, [R8,#12]
 400:	e598300c 	ldr	r3, [r8, #12]
            LDR     R4, [R8, #16]
 404:	e5984010 	ldr	r4, [r8, #16]
            LDR     R5, [R8, #20]
 408:	e5985014 	ldr	r5, [r8, #20]
            LDR     R6, [R8, #24]
 40c:	e5986018 	ldr	r6, [r8, #24]
            LDR     R7, [R8, #28]
 410:	e598701c 	ldr	r7, [r8, #28]
            PUSH    {R0-R7}                 //R0-R7 will be used later
 414:	e92d00ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7}
            
            /***Loading SPSR***/
            LDR     R0, [R8, #0x40]         //Load PROC1 SPSR to R0
 418:	e5980040 	ldr	r0, [r8, #64]	; 0x40
            MSR     SPSR, R0                //Copies R0 into SPSR            MOV     R7, R8                  //mov, let R7 be PD_array base address of process 1
 41c:	e169f000 	msr	SPSR_fc, r0
            
            /***Load other normal registers***/
            LDR     R8, [R7, #32]
 420:	e5978020 	ldr	r8, [r7, #32]
            LDR     R9, [R7, #36]
 424:	e5979024 	ldr	r9, [r7, #36]	; 0x24
            LDR     R10,[R7, #40]
 428:	e597a028 	ldr	r10, [r7, #40]	; 0x28
            LDR     R11,[R7, #44]
 42c:	e597b02c 	ldr	r11, [r7, #44]	; 0x2c
            LDR     R12,[R7, #48]
 430:	e597c030 	ldr	r12, [r7, #48]	; 0x30
            /***Normal registers restored finished***/
            
            /***FORCE GOES TO SVR, AND Restore LR&PC***/
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
 434:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
 438:	e129f001 	msr	CPSR_fc, r1
            LDR     SP, [R7, #52]          // Restore SVC sp from pd_array
 43c:	e597d034 	ldr	sp, [r7, #52]	; 0x34
            LDR     LR, [R7, #56]          // Restore SVC lr from pd_array
 440:	e597e038 	ldr	lr, [r7, #56]	; 0x38
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
 444:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
 448:	e121f001 	msr	CPSR_c, r1
            /***Done with Restoring***/

            /***SWTICH PROCESS***/
            POP     {R0-R7}                 //POP back used R0-R7
 44c:	e8bd00ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
            SUBS    PC, LR, #4            
 450:	e25ef004 	subs	pc, lr, #4

00000454 <JTAG_ISR>:


JTAG_ISR:   //CONTRIBUTION: FRANCIS

            LDR  R0,  =JTAG_UART_BASE       // load the base address of jtag
 454:	e59f00b8 	ldr	r0, [pc, #184]	; 514 <__cs3_region_init_size_ram+0x4>
            LDR  R1,  =CHAR_FLAG            // load the base address of char_flag
 458:	e59f10bc 	ldr	r1, [pc, #188]	; 51c <__cs3_region_init_size_ram+0xc>
            LDR  R2,  =CHAR_BUFFER          // load the base address of 
 45c:	e59f20bc 	ldr	r2, [pc, #188]	; 520 <__cs3_region_init_size_ram+0x10>
            MOV  R3,  #1
 460:	e3a03001 	mov	r3, #1
            LDRB R6, [R0]
 464:	e5d06000 	ldrb	r6, [r0]
            STR  R3, [R1]
 468:	e5813000 	str	r3, [r1]
            STR  R6, [R2]
 46c:	e5826000 	str	r6, [r2]

            BX   LR
 470:	e12fff1e 	bx	lr

00000474 <CHAR_BUFFER>:
 474:	00000000 	.word	0x00000000

00000478 <CHAR_FLAG>:
 478:	00000000 	.word	0x00000000

0000047c <CURRENT_PID>:
 47c:	00000000 	.word	0x00000000

00000480 <PD_ARRAY>:
 480:	deadbeef 	.word	0xdeadbeef
 484:	deadbeef 	.word	0xdeadbeef
 488:	deadbeef 	.word	0xdeadbeef
 48c:	deadbeef 	.word	0xdeadbeef
 490:	deadbeef 	.word	0xdeadbeef
 494:	deadbeef 	.word	0xdeadbeef
 498:	deadbeef 	.word	0xdeadbeef
 49c:	deadbeef 	.word	0xdeadbeef
 4a0:	deadbeef 	.word	0xdeadbeef
 4a4:	deadbeef 	.word	0xdeadbeef
 4a8:	deadbeef 	.word	0xdeadbeef
 4ac:	deadbeef 	.word	0xdeadbeef
 4b0:	deadbeef 	.word	0xdeadbeef
 4b4:	deadbeef 	.word	0xdeadbeef
 4b8:	deadbeef 	.word	0xdeadbeef
 4bc:	deadbeef 	.word	0xdeadbeef
 4c0:	deadbeef 	.word	0xdeadbeef
 4c4:	deadbee1 	.word	0xdeadbee1
 4c8:	deadbee1 	.word	0xdeadbee1
 4cc:	deadbee1 	.word	0xdeadbee1
 4d0:	deadbee1 	.word	0xdeadbee1
 4d4:	deadbee1 	.word	0xdeadbee1
 4d8:	deadbee1 	.word	0xdeadbee1
 4dc:	deadbee1 	.word	0xdeadbee1
 4e0:	deadbee1 	.word	0xdeadbee1
 4e4:	deadbee1 	.word	0xdeadbee1
 4e8:	deadbee1 	.word	0xdeadbee1
 4ec:	deadbee1 	.word	0xdeadbee1
 4f0:	deadbee1 	.word	0xdeadbee1
 4f4:	deadbee1 	.word	0xdeadbee1
 4f8:	3f000000 	.word	0x3f000000
 4fc:	00000000 	.word	0x00000000
 500:	000001d4 	.word	0x000001d4
 504:	00000053 	.word	0x00000053

00000508 <PD_OFFSET>:
 508:	00000044 	.word	0x00000044
 50c:	ff200050 	.word	0xff200050
 510:	fffec600 	.word	0xfffec600
 514:	ff201000 	.word	0xff201000
 518:	0000047c 	.word	0x0000047c
 51c:	00000478 	.word	0x00000478
 520:	00000474 	.word	0x00000474
 524:	ff200000 	.word	0xff200000
 528:	0000ffff 	.word	0x0000ffff
 52c:	fffec100 	.word	0xfffec100
 530:	00000480 	.word	0x00000480
 534:	00000508 	.word	0x00000508
